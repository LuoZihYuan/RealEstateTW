""" create sqlite3 database from csv file """
import os
import csv
import pprint
import sqlite3
import settings

__version__ = "0.1"
DATABASE_PATH = os.path.join(settings.__resources__, "registration.db")
IMPORTED_FOLDERS = "IMPORTED_FOLDERS"

FLOOR_CHT = ["", "‰∏Ä", "‰∫å", "‰∏â", "Âõõ", "‰∫î", "ÂÖ≠", "‰∏É", "ÂÖ´", "‰πù"]
def floor(txt: str) -> int:
    """ convert Chinese level into Arabic number """
    underground = True if txt[:2] == "Âú∞‰∏ã" else False
    target = txt[2:-1] if underground else txt [:-1]
    units = target.split(sep="ÂçÅ")
    total = 0; exp = 1
    for unit in units[::-1]:
        if not unit and exp != 1:
            digit = 1
        else:
            try:
                digit = FLOOR_CHT.index(unit)
            except ValueError:
                return None
        total += (digit * exp)
        exp *= 10
    total = total if not underground else -total
    return total if total else None
def floor_all(lst: list) -> list:
    """ shortcut for converting a list of Chinese levels """
    numerals = [floor(txt) for txt in lst if floor(txt)]
    return sorted(numerals)

def init_DB(c: sqlite3.Cursor) -> str:
    """ initialize database with essential data tables """
    c.execute('''CREATE TABLE IF NOT EXISTS {0}(
                     quarter TEXT PRIMARY KEY,
                     createdAt TEXT NOT NULL
                 );'''.format(IMPORTED_FOLDERS))
    c.execute('''CREATE TABLE IF NOT EXISTS Âª∫Áâ©ÂûãÊÖã(
                     id INTEGER PRIMARY KEY AUTOINCREMENT,
                     type TEXT NOT NULL UNIQUE,
                     count INTEGER DEFAULT 0
                 );''')
    c.execute('''CREATE TABLE IF NOT EXISTS ‰∏ªË¶ÅÁî®ÈÄî(
                     id INTEGER PRIMARY KEY AUTOINCREMENT,
                     type TEXT NOT NULL UNIQUE,
                     count INTEGER DEFAULT 0
                 );''')
    c.execute('''CREATE TABLE IF NOT EXISTS ‰∏ªË¶ÅÂª∫Êùê(
                     id INTEGER PRIMARY KEY AUTOINCREMENT,
                     type TEXT NOT NULL UNIQUE,
                     count INTEGER DEFAULT 0
                 );''')
    c.execute('''CREATE TABLE IF NOT EXISTS ÈÉΩÂ∏ÇÂúüÂú∞‰ΩøÁî®ÂàÜÂçÄ(
                     id INTEGER PRIMARY KEY AUTOINCREMENT,
                     type TEXT NOT NULL UNIQUE,
                     count INTEGER DEFAULT 0
                 );''')
    c.execute('''CREATE TABLE IF NOT EXISTS ÈùûÈÉΩÂ∏ÇÂúüÂú∞‰ΩøÁî®ÂàÜÂçÄ(
                     id INTEGER PRIMARY KEY AUTOINCREMENT,
                     type TEXT NOT NULL UNIQUE,
                     count INTEGER DEFAULT 0
                 );''')
    c.execute('''CREATE TABLE IF NOT EXISTS ÈùûÈÉΩÂ∏ÇÂúüÂú∞‰ΩøÁî®Á∑®ÂÆö(
                     id INTEGER PRIMARY KEY AUTOINCREMENT,
                     type TEXT NOT NULL UNIQUE,
                     count INTEGER DEFAULT 0
                 );''')
    c.execute('''CREATE TABLE IF NOT EXISTS Ëªä‰ΩçÈ°ûÂà•(
                     id INTEGER PRIMARY KEY AUTOINCREMENT,
                     type TEXT NOT NULL UNIQUE,
                     count INTEGER DEFAULT 0
                 );''')
    c.execute("SELECT quarter FROM {0}".format(IMPORTED_FOLDERS))
    return [t[0] for t in c.fetchall()]
def create_table(c: sqlite3.Cursor, prefix: str):
    """ create data tables with the same prefix """
    c.execute('''CREATE TABLE "{0}/TRX"(
                     Á∑®Ëôü TEXT PRIMARY KEY,
                     Á∏£Â∏Ç TEXT NOT NULL CHECK(length(Á∏£Â∏Ç) == 3),
                     ÈÑâÈéÆÂ∏ÇÂçÄ TEXT NOT NULL CHECK(length(ÈÑâÈéÆÂ∏ÇÂçÄ) <= 4),
                     ÂúüÂú∞ÂçÄÊÆµ‰ΩçÁΩÆÊàñÂª∫Áâ©ÂçÄÈñÄÁâå TEXT NOT NULL,
                     ‰∫§ÊòìÂπ¥ÊúàÊó• TEXT NOT NULL,
                     Á∏ΩÂÉπÂÖÉ INTEGER NOT NULL,
                     ÂñÆÂÉπÊØèÂπ≥ÊñπÂÖ¨Â∞∫ INTEGER,
                     Ë¶™ÂèãÈñì‰∫§Êòì INTEGER NOT NULL,
                     Âê´Â¢ûÂª∫ INTEGER NOT NULL
                 );'''.format(prefix))
    c.execute('''CREATE TABLE "{0}/GEO"(
                     Á∑®Ëôü TEXT PRIMARY KEY,
                     GEO_1 REAL NOT NULL,
                     GEO_2 REAL NOT NULL,
                     GEO_3 REAL NOT NULL,
                     GEO_4 REAL NOT NULL,
                     GEO_5 REAL NOT NULL,
                     GEO_Avg REAL NOT NULL,
                     FOREIGN KEY(Á∑®Ëôü) REFERENCES "{0}/TRX"(Á∑®Ëôü)
                 );'''.format(prefix))
    c.execute('''CREATE TABLE "{0}/BUILD"(
                     Á∑®Ëôü TEXT PRIMARY KEY,
                     Á∏ΩÊ®ìÂ±§Êï∏ INTEGER,
                     ÁßªËΩâÂ±§Ê¨° TEXT,
                     Âª∫Áâ©ÂûãÊÖã INTEGER NOT NULL,
                     ‰∏ªË¶ÅÁî®ÈÄî INTEGER,
                     ‰∏ªË¶ÅÂª∫Êùê INTEGER,
                     Âª∫ÁØâÂÆåÊàêÂπ¥Êúà TEXT,
                     Âª∫Áâ©ÁßªËΩâÁ∏ΩÈù¢Á©çÂπ≥ÊñπÂÖ¨Â∞∫ INTEGER NOT NULL,
                     'Âª∫Áâ©ÁèæÊ≥ÅÊ†ºÂ±Ä-ÈöîÈñì' INTEGER NOT NULL,
                     'Âª∫Áâ©ÁèæÊ≥ÅÊ†ºÂ±Ä-Êàø' INTEGER NOT NULL,
                     'Âª∫Áâ©ÁèæÊ≥ÅÊ†ºÂ±Ä-Âª≥' INTEGER NOT NULL,
                     'Âª∫Áâ©ÁèæÊ≥ÅÊ†ºÂ±Ä-Ë°õ' INTEGER NOT NULL,
                     ÊúâÁÑ°ÁÆ°ÁêÜÁµÑÁπî INTEGER NOT NULL,
                     FOREIGN KEY(Á∑®Ëôü) REFERENCES "{0}/TRX"(Á∑®Ëôü),
                     FOREIGN KEY(Âª∫Áâ©ÂûãÊÖã) REFERENCES Âª∫Áâ©ÂûãÊÖã(id),
                     FOREIGN KEY(‰∏ªË¶ÅÁî®ÈÄî) REFERENCES ‰∏ªË¶ÅÁî®ÈÄî(id),
                     FOREIGN KEY(‰∏ªË¶ÅÂª∫Êùê) REFERENCES ‰∏ªË¶ÅÂª∫Êùê(id)
                 );'''.format(prefix))
    c.execute('''CREATE TABLE "{0}/LAND"(
                     Á∑®Ëôü TEXT PRIMARY KEY,
                     ÂúüÂú∞ÁßªËΩâÁ∏ΩÈù¢Á©çÂπ≥ÊñπÂÖ¨Â∞∫ REAL NOT NULL,
                     ÈÉΩÂ∏ÇÂúüÂú∞‰ΩøÁî®ÂàÜÂçÄ INTEGER,
                     ÈùûÈÉΩÂ∏ÇÂúüÂú∞‰ΩøÁî®ÂàÜÂçÄ INTEGER,
                     ÈùûÈÉΩÂ∏ÇÂúüÂú∞‰ΩøÁî®Á∑®ÂÆö INTEGER,
                     FOREIGN KEY(Á∑®Ëôü) REFERENCES "{0}/TRX"(Á∑®Ëôü),
                     FOREIGN KEY(ÈÉΩÂ∏ÇÂúüÂú∞‰ΩøÁî®ÂàÜÂçÄ) REFERENCES ÈÉΩÂ∏ÇÂúüÂú∞‰ΩøÁî®ÂàÜÂçÄ(id),
                     FOREIGN KEY(ÈùûÈÉΩÂ∏ÇÂúüÂú∞‰ΩøÁî®ÂàÜÂçÄ) REFERENCES ÈùûÈÉΩÂ∏ÇÂúüÂú∞‰ΩøÁî®ÂàÜÂçÄ(id),
                     FOREIGN KEY(ÈùûÈÉΩÂ∏ÇÂúüÂú∞‰ΩøÁî®Á∑®ÂÆö) REFERENCES ÈùûÈÉΩÂ∏ÇÂúüÂú∞‰ΩøÁî®Á∑®ÂÆö(id)
                 );'''.format(prefix))
    c.execute('''CREATE TABLE "{0}/PARK"(
                     Á∑®Ëôü TEXT PRIMARY KEY,
                     Ëªä‰ΩçÈ°ûÂà• INTEGER,
                     Ëªä‰ΩçÁßªËΩâÁ∏ΩÈù¢Á©çÂπ≥ÊñπÂÖ¨Â∞∫ REAL NOT NULL,
                     Ëªä‰ΩçÁ∏ΩÂÉπÂÖÉ INTEGER NOT NULL,
                     FOREIGN KEY(Á∑®Ëôü) REFERENCES "{0}/TRX"(Á∑®Ëôü),
                     FOREIGN KEY(Ëªä‰ΩçÈ°ûÂà•) REFERENCES Ëªä‰ΩçÈ°ûÂà•(id)
                 );'''.format(prefix))

def parse_csv(rdr: csv.DictReader, c: sqlite3.Cursor, prefix: str, county: str):
    """ insert csv into specified data table """
    for row in rdr:
        if "Âª∫Áâ©" not in row["‰∫§ÊòìÊ®ôÁöÑ"]:
            continue

        if row["ÈÑâÈéÆÂ∏ÇÂçÄ"] == "fa72ÂüîÈÑâ":
            row["ÈÑâÈéÆÂ∏ÇÂçÄ"] = "ÈπΩÂüîÈÑâ"
        elif row["ÈÑâÈéÆÂ∏ÇÂçÄ"] == "Èáëfa4bÈÑâ":
            row["ÈÑâÈéÆÂ∏ÇÂçÄ"] = "ÈáëÂ≥∞ÈÑâ"
        try:
            c.execute('''INSERT INTO "{0}/TRX"
                             VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);'''.format(prefix),
                      (row["Á∑®Ëôü"], county, row["ÈÑâÈéÆÂ∏ÇÂçÄ"], row["ÂúüÂú∞ÂçÄÊÆµ‰ΩçÁΩÆÊàñÂª∫Áâ©ÂçÄÈñÄÁâå"],
                       row["‰∫§ÊòìÂπ¥ÊúàÊó•"], row["Á∏ΩÂÉπÂÖÉ"], row["ÂñÆÂÉπÊØèÂπ≥ÊñπÂÖ¨Â∞∫"],
                       True if ("Ë¶™" in row["ÂÇôË®ª"]) or ("Âèã" in row["ÂÇôË®ª"]) else False,
                       True if "Â¢ûÂª∫" in row["ÂÇôË®ª"] else False))
        except sqlite3.IntegrityError:
            pprint.pprint(row)
            raise
        numbers = floor_all([f for f in row["ÁßªËΩâÂ±§Ê¨°"].split(sep="Ôºå") if f and f[-1] == "Â±§"])
        num_str = ", ".join(str(number) for number in numbers)

        def exist_row(picked_row: csv.OrderedDict, fieldname: str):
            """ insert new type into specified table or increase count when already exists """
            if (not picked_row[fieldname]) or ("Ë¶ã" in picked_row[fieldname]):
                return
            c.execute("SELECT EXISTS(SELECT * FROM {0} WHERE type == ?);".format(fieldname),
                      (picked_row[fieldname],))
            if not c.fetchall()[0][0]:
                c.execute("INSERT INTO {0}(type) VALUES(?);".format(fieldname),
                          (picked_row[fieldname],))
            c.execute("UPDATE {0} SET count = count + 1 WHERE type = ?;".format(fieldname),
                      (picked_row[fieldname],))

        exist_row(row, "Âª∫Áâ©ÂûãÊÖã")
        exist_row(row, "‰∏ªË¶ÅÁî®ÈÄî")
        exist_row(row, "‰∏ªË¶ÅÂª∫Êùê")
        c.execute('''INSERT INTO "{0}/BUILD" VALUES (
                         ?, ?, ?, (
                             SELECT id FROM Âª∫Áâ©ÂûãÊÖã WHERE type == ?
                         ), (
                             SELECT id FROM ‰∏ªË¶ÅÁî®ÈÄî WHERE type == ?
                         ), (
                             SELECT id FROM ‰∏ªË¶ÅÂª∫Êùê WHERE type == ?
                         ), ?, ?, ?, ?, ?, ?, ?);'''.format(prefix),
                  (row["Á∑®Ëôü"], floor(row["Á∏ΩÊ®ìÂ±§Êï∏"]), num_str if num_str else None, row["Âª∫Áâ©ÂûãÊÖã"],
                   row["‰∏ªË¶ÅÁî®ÈÄî"], row["‰∏ªË¶ÅÂª∫Êùê"], row["Âª∫ÁØâÂÆåÊàêÂπ¥Êúà"], row["Âª∫Áâ©ÁßªËΩâÁ∏ΩÈù¢Á©çÂπ≥ÊñπÂÖ¨Â∞∫"],
                   True if row["Âª∫Áâ©ÁèæÊ≥ÅÊ†ºÂ±Ä-ÈöîÈñì"] == "Êúâ" else False, row["Âª∫Áâ©ÁèæÊ≥ÅÊ†ºÂ±Ä-Êàø"], row["Âª∫Áâ©ÁèæÊ≥ÅÊ†ºÂ±Ä-Âª≥"],
                   row["Âª∫Áâ©ÁèæÊ≥ÅÊ†ºÂ±Ä-Ë°õ"], True if row["ÊúâÁÑ°ÁÆ°ÁêÜÁµÑÁπî"] == "Êúâ" else False))

        exist_row(row, "ÈÉΩÂ∏ÇÂúüÂú∞‰ΩøÁî®ÂàÜÂçÄ")
        exist_row(row, "ÈùûÈÉΩÂ∏ÇÂúüÂú∞‰ΩøÁî®ÂàÜÂçÄ")
        exist_row(row, "ÈùûÈÉΩÂ∏ÇÂúüÂú∞‰ΩøÁî®Á∑®ÂÆö")
        c.execute('''INSERT INTO "{0}/LAND" VALUES (
                         ?, ?, (
                             SELECT id FROM ÈÉΩÂ∏ÇÂúüÂú∞‰ΩøÁî®ÂàÜÂçÄ WHERE type == ?
                         ), (
                             SELECT id FROM ÈùûÈÉΩÂ∏ÇÂúüÂú∞‰ΩøÁî®ÂàÜÂçÄ WHERE type == ?
                         ), (
                             SELECT id FROM ÈùûÈÉΩÂ∏ÇÂúüÂú∞‰ΩøÁî®Á∑®ÂÆö WHERE type == ?
                         ));'''.format(prefix),
                  (row["Á∑®Ëôü"], row["ÂúüÂú∞ÁßªËΩâÁ∏ΩÈù¢Á©çÂπ≥ÊñπÂÖ¨Â∞∫"], row["ÈÉΩÂ∏ÇÂúüÂú∞‰ΩøÁî®ÂàÜÂçÄ"], row["ÈùûÈÉΩÂ∏ÇÂúüÂú∞‰ΩøÁî®ÂàÜÂçÄ"],
                   row["ÈùûÈÉΩÂ∏ÇÂúüÂú∞‰ΩøÁî®Á∑®ÂÆö"]))

        exist_row(row, "Ëªä‰ΩçÈ°ûÂà•")
        c.execute('''INSERT INTO "{0}/PARK" VALUES (
                             ?, (
                                 SELECT id FROM Ëªä‰ΩçÈ°ûÂà• WHERE type == ?
                             ), ?, ?);'''.format(prefix),
                  (row["Á∑®Ëôü"], row["Ëªä‰ΩçÈ°ûÂà•"], row["Ëªä‰ΩçÁßªËΩâÁ∏ΩÈù¢Á©çÂπ≥ÊñπÂÖ¨Â∞∫"], row["Ëªä‰ΩçÁ∏ΩÂÉπÂÖÉ"]))

def main():
    """ Main Process """
    con = sqlite3.connect(DATABASE_PATH)
    cur = con.cursor()
    table_names = init_DB(cur)

    folder_names = next(os.walk(settings.__resources__))[1]
    for folder_name in folder_names:
        print(folder_name)
        folder_path = os.path.join(settings.__resources__, folder_name)
        if folder_name in table_names:
            continue
        cur.execute("BEGIN;") # Disable auto-commit
        create_table(cur, folder_name)
        file_names = os.listdir(folder_path)
        for file_name in file_names:
            (root, ext) = os.path.splitext(file_name)
            if (ext != ".CSV") or (not root.endswith("A")):
                continue
            file_path = os.path.join(folder_path, file_name)
            with open(file_path, 'r', encoding='big5', errors='ignore') as fstream:
                reader = csv.DictReader(fstream)
                cnty_en = settings.CountyAlpha(root[0]).name
                cnty_cht = settings.CountyCht[cnty_en].value
                parse_csv(reader, cur, folder_name, cnty_cht)
        cur.execute("INSERT INTO {0} VALUES(?, CURRENT_TIMESTAMP)".format(IMPORTED_FOLDERS),
                    (folder_name,))
        cur.execute("COMMIT;")

if __name__ == "__main__":
    main()
